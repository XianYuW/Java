java.util.function.Predicate<T>接口：
    当我们需要对某种类型的数据进行判断，从而得到一个boolean值结果
    
抽象方法：
    boolean test(T t):用于条件判断
        符合，返回true
        不符合，返回false
    
默认方法：
    既然是条件判断，就会有与或非三种逻辑关系。
    and：
        逻辑与，将两个Predicate条件使用“与”逻辑连接起来实现“并且”的效果，
        JDK源码为：
            default Predicate<T> and(Predicate<? super T> other){
                Objects.requireNonNull(other);
                return (t)-> test(t)&&other.test(t);
            }
    or
    negate

//代码练习

//*********************************一、抽象方法:test*****************************
                public class Demo03Predicate {
                    /*
                        定义一个方法：
                            参数传递一个String类型的字符串
                            传递一个Perdicate接口，泛型使用String
                            使用Predicate中的方法test对字符串进行判断，把判断的结果返回
                     */
                    public static boolean checkString(String s , Predicate<String> pre){
                        return pre.test(s);
                    }

                    public static void main(String[] args) {
                        String str = "abcdef";
                        boolean b = checkString(str, (t) -> t.length() > 5);
                        System.out.println(b);
                    }
                }
//**************************************默认方法：and*********************************
                public class Demo03PredicateAnd {
                    /*
                        定义一个方法，方法的参数，传递一个字符串，传递两个Predicate接口
                                一个用于判断字符串的长度是否大于5，
                                一个用于判断字符串中是否包含a
                                两个条件必须同时满足
                     */
                    public static boolean checkString1(String s, Predicate<String> pre1,Predicate<String> pre2){
                        return pre1.test(s)&&pre2.test(s);
                    }
                    //使用and
                    public static boolean checkString2(String s, Predicate<String> pre1,Predicate<String> pre2){
                        return pre1.and(pre2).test(s);
                    }

                    public static void main(String[] args) {
                        String s = "abcdef";
                        boolean b1 = checkString1(s,
                                (t) -> {
                                    return t.length() > 5;
                                },
                                (t) -> {//判断字符串中是否包含a
                                    return t.contains("a");
                                });
                        System.out.println(b1);
                        boolean b2 = checkString2(s, (t) -> t.length() > 5, (t) -> t.contains("g"));
                        System.out.println(b2);
                    }
                }
