默认方法：andThen
    如果一个方法的参数和返回值全都是Consumer类型，那么就可以实现效果，消费数据的时候，首先做一个操作，然后在做一个操作，实现组合。
    这就是Consumer方法中的default方法andThen，源码为：
        default Consumer<T> andThen(Consumer<? super T> after){
            Objects.requireNonNull(after);
            return (T t)->{
                accept(t);
                after.accept(t);
            };
        }
        
//代码练习
/**
    Consumer接口的默认方法andThen
    作用：需要两个Consumer接口，可以把两个Consumer接口组合到一起，再进行消费

        例如：
            Consumer<String> con1
            Consumer<String> con2
            String s = "hello"
            con1.accept(s);
            con2.accept(s);
            连接两个Consumer接口，在进行消费
            con1.andThen(con2).accpet(s);谁写前面谁先消费
 */
public class Demo2ConsumerAndThen {
    public static void method1(String s, Consumer<String> con1,Consumer<String> con2){
        con1.accept(s);
        con2.accept(s);
    }
    //使用andThen
    public static void method2(String s,Consumer<String> con1,Consumer<String> con2){
        con1.andThen(con2).accept(s);
    }
    public static void main(String[] args) {
        method1("马儿扎哈",(s)->System.out.println(s),(s)->System.out.println(new StringBuffer(s).reverse().toString()));
        //把字符串转换为大写输出
        //把字符串转换为小写输出
        method2("hello",(t)->System.out.println(t.toUpperCase()),(t)->System.out.println(t.toLowerCase()));
    }
}
