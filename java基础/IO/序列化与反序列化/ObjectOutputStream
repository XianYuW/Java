/**
 * java.io.ObjectOutputStream extends OutputStream
 * ObjectOutputStream:对象的序列化流
 * 作用：
 * 		把对象以流的方式写入到文件中保存
 * 
 * 构造方法：
 * 		ObjectOutputStream(OutputStream out)创建写入指定OutputStream的ObjectOutputStream
 * 		参数：
 * 			OutputStream：字节输出流
 * 
 * 特有的成员方法：
 * 		void writeObject(Object obj)将指定的对象写入ObjectOutoutStream
 * 
 * 使用步骤：
 * 		1.创建ObjectOutputStream对象，构造方法中传递字节输出流
 * 		2.使用ObjectOutputStream对象中的方法writeObject，把对象写入到文件中
 * 		3.释放资源
 */
/**
 * 序列化和反序列化的时候，会抛出NotSerializableException异常
 * 类通过实现java.io.Serializable接口以启用其序列化功能。未实现此接口的类将无法使其任何状态序列化或反序列化
 * Serializable接口也叫标记型接口
 * 		要进行序列化和反序列化的类必须实现Serializable接口，就会给类添加一个标记
 *      当我们进行序列化和反序列化的时候，就会检测类上是否有这个标记
 *      	有，就可以进行序列化和反序列化
 *      	没有，就会抛出NotSerializableException异常
 *      
 */
//代码练习
public class Person implements Serializable{
	private String name;
	private int age;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public Person() {
		super();
	}
	public Person(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + "]";
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + age;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (age != other.age)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}
}

public class DemoObjectOutputStream {
	public static void main(String[] args) throws IOException {
		 //1.创建ObjectOutputStream对象，构造方法中传递字节输出流
		ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("src\\DemoObjectStream\\Person.txt"));
		 //2.使用ObjectOutputStream对象中的方法writeObject，把对象写入到文件中
		oos.writeObject(new Person("迪丽热巴",18));
		oos.writeObject(new Person("古力娜扎",19));
		oos.writeObject(new Person("马儿扎哈",20));
		 //3.释放资源
		oos.close();
	}
}
