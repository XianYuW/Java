/**
 * JDK1.7之前使用try catch finally 处理流中的异常
 */
public class DemoTryCatch {
	public static void main(String[] args) throws IOException {
		//提高变量fw的作用域，让final可以使用
		//变量在定义的时候可以没有值，但是使用的时候必须有值
		//fw = new FileWriter("src\\DemoIO\\writer.txt",true);执行失败，fw就没有值，fw.close会报错
		FileWriter fw = null;
		try {
			fw = new FileWriter("src\\DemoIO\\writer.txt",true);
			for (int i = 0; i < 10; i++) {
				fw.write("HelloWorld" + i + "\r\n");
			}
		} catch (IOException e) {
			// TODO: handle exception
			System.out.println(e);
		}finally{
			//一定会执行的代码
			//如果创建对象失败了，fw默认值是null，不能调用方法，会抛出NullPointerException异常，
			//需要增加一个判断，不是null再释放资源
			if(fw != null) {
				try {
					//fw声明抛出了IOException异常对象，所以我们要么处理这个异常，要么throws，要么try..catch
					fw.close();
				}catch(IOException e){
					System.out.println(e);
				}
			}	
		}
		
	}
}
