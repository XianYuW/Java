 * java.io.BufferedOutputStream extends OutputStream
 * BufferedOutputStream :字节缓冲输出流
 * 
 * 继承父类的共性成员方法：
 * 		-public void close():关闭此输出流并释放与此流关联的任何系统资源
 *		-public void flush():刷新此输出流并强制任何缓冲输出字节被写出
 *		-public void write(byte[] b):将b.length的字节从指定的字节数组写入此输出流
 *		-public void write(byte[] b,int off,int len):从指定的数组中写入指定长度的字节到输出流
 *													偏移量为off，长度为len
 *		-public astract void write(int b):将指定的字节输出到输出流
 *
 *构造方法：
 *		BufferedOutputStream(OutputStream out)创建一个新的缓冲输出流，以将数据写入指定的底层输出流
 *		BufferedOutputStream(OutputStream out,int size)创建一个虚拟的缓冲输出流，以将指定缓冲区大小的数据
 *									写入指定的底层输出流
 *		参数：
 *			OutputStream out 字节输出流
 *				我们可以传递FileOutputStream，缓冲流会给FileOutputStream增加一个缓冲区，提高FileOutputStream的写入效率
 *			int size  指定缓冲流内部缓冲区的大小，不指定就是默认的大小
 *
 *使用步骤：
 *		1.创建FileOutputStream对象，构造方法中绑定要输出的目的地
 *		2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率
 *		3.使用BufferedOutputStream对象的方法write，将数据写入内部的缓冲区中
 *		4.使用BufferedOutputStream对象的方法flush，将内存缓冲区中的数据，刷新到文件中
 *		5.释放资源(会先调用flush方法刷新数据，第四步可以省略)
 
 //代码练习
 public class DemoBufferOutputStream {
	public static void main(String[] args) throws IOException {
		//1.创建FileOutputStream对象，构造方法中绑定要输出的目的地
		FileOutputStream fos = new FileOutputStream("src\\DemoBuffer\\a.txt");
		//2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象
		BufferedOutputStream bos = new BufferedOutputStream(fos);
		//3.使用BufferedOutputStream对象的方法write，将数据写入内部的缓冲区中
		bos.write("将数据写入到内存缓冲区中去".getBytes());
		//4.使用BufferedOutputStream对象的方法flush
		bos.flush();
		//5.释放资源
		bos.close();
		fos.close();
	}
}
