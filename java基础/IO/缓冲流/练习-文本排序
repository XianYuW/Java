对文本内容进行排序(按照1，2，3...)
    3.创建一个字符输出流对象，构造方法中绑定字符输出流
    2.创建一个字符输入流对象，构造方法中绑定字符输入流
    4.使用字符输出流的方法readLine，逐行读取文本
    5.把读取到的文本进行切割，获取行中的序号和文本内容
    7.遍历HashMap集合，获取每一个键值对
    1.创建一个HashMap集合对象，key:存储每行文本的序号（1,2,3,..）;value:存储每行的文本
    6.把切割好的文本序号和文本内容存储到HashMap集合中(key是有序的，会自动排序)
    9.把拼接好的文本行，使用字符缓冲输出流中的方法write，写入到文件中
    8.把每一个键值对拼接称为一个文本行
    10.释放资源
    
分析：
 * 			1.创建一个HashMap集合对象，key:存储每行文本的序号（1,2,3,..）;value:存储每行的文本
 * 			2.创建一个字符输入流对象，构造方法中绑定字符输入流
 * 			3.创建一个字符输出流对象，构造方法中绑定字符输出流
 * 			4.使用字符输出流的方法readLine，逐行读取文本
 * 			5.把读取到的文本进行切割，获取行中的序号和文本内容
 * 			6.把切割好的文本序号和文本内容存储到HashMap集合中(key是有序的，会自动排序)
 * 			7.遍历HashMap集合，获取每一个键值对
 * 			8.把每一个键值对拼接称为一个文本行
 * 			9.把拼接好的文本行，使用字符缓冲输出流中的方法write，写入到文件中
 * 			10.释放资源
 
 //代码练习
 public class FileSort {
	public static void main(String[] args) throws IOException {
		//1.创建一个HashMap集合对象
		HashMap<String,String> map = new HashMap<>();
		//2.创建一个字符输入流对象，构造方法中绑定字符输入流
		BufferedReader br = new BufferedReader(new FileReader("src\\DemoIO\\sortIn.txt"));
		//3.创建一个字符输出流对象，构造方法中绑定字符输出流
		BufferedWriter bw = new BufferedWriter(new FileWriter("src\\DemoIO\\sortOut.txt"));
		//4.使用字符输出流的方法readLine，逐行读取文本
		String line;
		while((line = br.readLine()) !=null) {
			//5.把读取到的文本进行切割，获取行中的序号和文本内容
			String[] arr = line.split("\\.");
			//6.把切割好的文本序号和文本内容存储到HashMap集合中(key是有序的，会自动排序)
			map.put(arr[0],arr[1]);
		}
		//7.遍历HashMap集合，获取每一个键值对
		for (String key : map.keySet()) {
			String value = map.get(key);
			//8.把每一个键值对拼接称为一个文本行
			line = key + "." + value;
			//9.把拼接好的文本行，使用字符缓冲输出流中的方法write，写入到文件中
			bw.write(line);
			bw.newLine();
		}
		//10.释放资源
		bw.close();
		br.close();
	}
}
