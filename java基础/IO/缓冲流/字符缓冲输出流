 * java.io.BufferedWriter extends Writer
 * BufferedWriter  字符缓冲输出流
 * 
 * 继承自父类的共性成员方法：
 * 		-void write(int c)写入单个字符
 * 		-void write(char[] cbuf)写入字符数组
 * 		-abstract void write(char[] cbuf,int off,int len)写入字符数组的某一部分，
 * 													off开始索引，len写入的字符个数
 * 		-void write(String str)写入字符串
 * 		-void write(String str,int off,int len)写入字符串的某一部分
 * 													off开始索引，len写入的字符个数
 * 		-void flush()刷新该流的缓冲
 * 		-void close()关闭此流，会先执行刷新操作，再关闭
 * 
 * 构造方法：
 * 		BufferedWriter(Writer out)创建一个默认大小输出缓冲区的缓冲字符输出流
 * 		BufferedWriter(Writer out,int size)创建一个指定大小输出缓冲区的缓冲字符输出流
 * 		参数：
 * 			Writer out ：字符输出流
 * 				我们可以传递FileWriter，缓冲流会给FileWriter增加一个缓冲区，提高FileWriter的写入效率
 * 			int size：指定缓冲流内部缓冲区的大小，不指定就是默认的大小
 * 
 * 特有的成员方法：
 * 		void newLine()写入一个行分隔符。会根据不同的操作系统，获取不同的行分隔符
 * 
 * 使用步骤：
 * 		1.创建字符缓冲输出流对象，构造方法中传递字符输出流
 * 		2.调用字符缓冲输出流中的方法write，把数据写入到内存缓冲区中
 * 		3.调用字符缓冲输出流中的方法flush，把内存缓冲区的数据，刷新到文件中
 * 		4.释放资源
 
 //代码练习
 
 public class DemoBufferedWriter {
	public static void main(String[] args) throws IOException {
		//1.创建字符缓冲输出流对象，构造方法中传递字符输出流
		BufferedWriter bw = new BufferedWriter(new FileWriter("src\\DemoBuffer\\BufferedWriter.txt"));
		//2.调用字符缓冲输出流中的方法write，把数据写入到内存缓冲区中
		for (int i = 0; i < 10; i++) {
			bw.write("写入内存缓冲区     " + i+"\t\t\t\t\t");
			bw.write("第"+i+"次", 0, 3);
			bw.newLine();
		}
		//3.调用字符缓冲输出流中的方法flush，把内存缓冲区的数据，刷新到文件中
		bw.flush();
		//4.释放资源
		bw.close();	
	}
}
