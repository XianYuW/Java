如果并发的线程很多，每个线程执行一个时间很短的任务就结束了，频繁创建线程会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间
因此，创建了线程池。

概念：容纳对多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多的资源
    在JDK1.5之后，内置了线程池，可以直接使用，无需自己创建集合
    
使用线程池的好处：
    1.降低资源消耗，减少了创建和销毁线程的次数，每个工作线程都可以重复利用，可以执行多个任务
    2.提高了响应速度。当任务到达时，任务可以不需要等到线程创建就能立刻执行
    3.提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线程的数目，防止因消耗过多的内存，从而导致服务器死机
        每个线程大概需要1MB内存，线程开的越多，消耗内存越大，最后死机
        
java.util.concurrent.Executor:线程池的工厂类，用来生产线程池

Executor类中的静态方法：
        static ExecutorService newFixedThreadPool(int nThreads)创建一个可重用固定线程数的线程池
        
        参数：int nThreads 创建线程池中包含的线程数量
        返回值：ExecutorService接口，返回的是ExecutorService接口的实现类对象，
                我们可以使用ExecutorService接口接收(面向接口编程)

java.util.concurret.ExecutorService:线程池接口
        用来从线程池中获取线程，调用static方法，执行线程任务
            submit(Runnable task)提交一个Runnable任务用于执行
        关闭/销毁线程池的方法
            void shutdown()
            
线程池的使用步骤：
        1.使用线程池的工厂类Executors里面提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池
        2. 创建一个类，实现Runnabl接口，重写run方法，设置线程任务
        3.调用ExecutorService中的方法submit，传递线程任务(实现类)，开启线程，执行run方法
        4.调用ExecutorService中的方法shutdown销毁线程池(不建议执行)
