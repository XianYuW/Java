接口就是多个类的公共规范。
接口是一种引用数据类型，最重要的内容就是其中的：抽象方法
如何定义一个接口的格式：
                public interface  接口名称{
                        //接口内容
                }
                
                备注：换成了关键字interface之后，编译生成的字节码文件依然是：.java--> .class
                
                如果是Java 7.  那么接口中可以包含的内容有：
                1.常量
                2.抽象方法
                
                Java 8. 还可以额外包含：
                3.默认方法
                4.静态方法
                
                Java 9. 还可以额外包含：
                5.私有方法
      

接口可以定义抽象方法： public abstract 返回值类型  方法名称(参数列表)；
    注：
        1.接口中的抽象方法，修饰符必须是两个固定的关键字：public abstract
        2.这两个关键字修饰符，可以选择性的省略
        3.方法的三要素可随意定义
        
  
接口使用步骤：
      1.接口不能直接使用，必须有一个【实现类】来【实现】该接口
            格式：
                public class 实现类名称 implements{
                    //...
                }
      2.接口的实现类必须覆盖重写(实现)接口中所有的抽象方法
            实现：去掉abstract关键字，加上方法体大括号。
          
       3.创建实现类的对象，进行使用。
       
       注：
       如果实现类并没有覆盖重写接口中的所有的抽象类方法，那么这个实现类自己就必须是抽象类
       
 


public class MyInterfaceAbstractTest {
	public static void main(String[] args) {
		MyInterfaceAbstractImpl impl = new MyInterfaceAbstractImpl();
		
		impl.method2();//这是第2个方法
		impl.method3();//这是第3个方法
		
	}
}
public class MyInterfaceAbstractImpl implements MyInterfaceAbstract{

	@Override
	public void method1() {
		// TODO Auto-generated method stub
		System.out.println("这是第一个方法");
	}

	@Override
	public void method2() {
		// TODO Auto-generated method stub
		System.out.println("这是第2个方法");
	}

	@Override
	public void method3() {
		// TODO Auto-generated method stub
		System.out.println("这是第3个方法");
	}

	@Override
	public void method4() {
		// TODO Auto-generated method stub
		System.out.println("这是第4个方法");
	}
	
}
public interface MyInterfaceAbstract {
	//这是抽象方法
	public abstract void method1();
	//这也是抽象方法
	public void method2();
	//这也是抽象方法
	abstract void method3();
	//这也是抽象方法
	void method4();
	
}
