Object 类是类层次的根(父)类
每个类都使用Object作为超(父)类
所有对象都实现这个类的方法

toString方法： 返回对象的字符串表示，
                直接打印对象的名字的话，则打印出来的是该对象的地址
                看一个类是否重写了toString，直接打印这个类的对象，若没有重写则打印的是对象的地址值
                Scanner 和 ArrayList重写了toString
                
equals方法： 指示其他某个对象是否与此对象“相等”
            equals源码：
              public boolean equals(Object obj) {
                  return (this == obj);
              }
              参数：Object obj：可以传递任意的对象
                    == 比较运算符 ，返回的是一个布尔值
                    基本数据类型：比较的是值
                    引用数据类型：比较两个对象的地址值
       因为equals方法默认比较的是两个对象的地址值，没有意义，所以我们要重写equals方法，比较两个对象的属性
       问题：
            隐含着一个多态，多态是由弊端的：无法使用子类特有的内容(属性和方法)
            例如： Object obj = p1 = new Person("马儿扎哈"，20);
          解决：可以使用向下转型(强转)把obj类型转换为Person
          
          注：p1.equals(p2);//若p1为null，则会报空指针异常，NullPointerException
          
Objects类：工具类，提供一些方法操作对象，由静态方法组成，这些方法是空指针安全的  或者说是容忍空指针的，
            用于计算对象的hashcode、返回对象的字符串表示形式、比较两个对象
            例如，在前面的equals方法中会抛出空指针异常，而objects类中的equals方法优化了这个问题；
            方法如下：public static boolean equals(Object a, Object b)判断两个对象是否相等
            源码为：
                  public static boolean equals(Object a,Object b){
                      return (a == b)||(a !=null &&a.equals(b));
                  }
