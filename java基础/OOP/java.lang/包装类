包装类：
      基本数据类型，使用起来非常方便，但是没有对应的方法来操作这些基本数据类型的数据
      可以使用一个类，把基本类型的数据封装起来，在类中定义一些方法，这个类叫做包装类
      我们可以使用类中的方法来操作这些基本类型的数据
      
      
     基本类型            包装类（引用类型，包装类都位于java.lang包下）
     byte                Byte
     short               Short
     int                 Integer[特殊]
     long                Long
     float               Float
     double              Double
     boolean             Boolean
     char                Character[特殊]

装箱：把基本类型的数据，包装到包装类中(基本类型的数据->包装类)
     构造方法：
            Integer(int value):构造一个新分配的Integer对象，他表示指定的int值
            Integer(String s)： 构造一个新分配的Integer对象，它表示String参数所指定的int值
                  传递的字符串必须是基本类型的字符串，否则会抛出异常。例如"100"正确,"a"抛出异常
                  
      静态方法：
            static Integer valueOf(int i):返回一个表示指定的int值的Integer实例
            static Integer valueOf(String s):返回保存指定的String的值的Integer对象
            
拆箱：在包装类中取出基本类型的数据(包装类-》基本类型的数据)
      成员方法：
            int intValue() 以int类型返回该Integer的值 
            
//代码
public class DemoInteger {
	public static void main(String[] args) {
		
		//装箱
		//构造方法1：Integer(int value)
		Integer i = new Integer(1);//方法上有横线，说明方法过时了
		System.out.println(i);//1 重写了toString方法
		//构造方法2：Integer(String s)
		Integer i2 = new Integer("1");
		System.out.println(i2);//1
		
		//静态方法1：static Integer valueOf(int i)
		Integer i3 = Integer.valueOf(1);
		System.out.println(i3);//1
		//静态方法2： static Integer valueOf(String s)
		Integer i4 = Integer.valueOf("1");//1
//		Integer i4 = Integer.valueOf("a");//异常，抛出NumberFormatException数字格式化异常
		System.out.println(i4);
		
		//拆箱：在包装类中取出基本类型的数据(包装类-》基本类型的数据)
		//int intValue()
		int i5 = i.intValue();
		System.out.println(i5);//1
	}
}
