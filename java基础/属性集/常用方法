 一：    *使用Properties集合存储数据，遍历取出Properties中的数据
         *Properties集合是一个双列集合，key和value都是默认字符串
         *Properties集合有一些操作字符串的特有方法
         *		Object setProperty(String key,String value) 调用Hashtable的方法put
         *		String getProperty(String key) 通过key找到value值，此方法相当于Map集合的get(key)方法
         *		Set<String> stringPropertyNames() 返回此属性列表中的键值，其后该键及其对应值是字符串，
         *											此方法相当于Map集合的keySet方法
         
二：
    	 *可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入硬盘中存储
       *		void store(OutputStream out,String comments)
       *		void store(Writer writer ,String comments)
       *		参数：
       *			OutputStream out:字节输出流，不能写入中文
       *			Writer writer:字符输出流，可以写入中文
       *			String comments:注释，用来说明保存的文件是做什么用的
       *					不能使用中文，会产生乱码，默认编码是Unicode
       *					一般使用空字符串
       *
       *		使用步骤：
       *			1.创建Properties集合对象，添加数据
       *			2.创建字节流输出/字符流输出对象，构造方法中绑定要输出的目的地
       *			3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入硬盘中存储
       *			4.释放资源
       
三：  
       * 可以使用Properties集合中的方法load，把硬盘中保存的文件(键值对)读取到集合中使用
       * 		void load(InputStream inStream)
       * 		void load(Reader reader)
       * 参数：
       * 		InputStream inStream：字节输入流，不能读取含有中文的键值对
       * 		Reader reader：字符输入流，能读取含有中文的键值对
       * 使用步骤：
       * 		1.创建Properties集合对象
       * 		2.使用Properties集合对象中 的方法load读取保存键值对的文件
       * 		3.遍历Properties集合
       * 		注意：
       * 			1.存储键值对的文件中，键与值默认的连接符号可以使用=，空格(其他符号)
       * 			2.存储键值对的文件中，可以使用#进行注释，被注释的键值不会再被读取
       * 			3.存储键值对的文件中，键与值默认都是字符串，不用再加“”
       
//代码练习

public class DemoProperties1 {
	public static void main(String[] args) throws IOException {
		show3();
	}
	/** 可以使用Properties集合中的方法load，把硬盘中保存的文件(键值对)读取到集合中使用
	 * 		void load(InputStream inStream)
	 * 		void load(Reader reader)
	 * 参数：
	 * 		InputStream inStream：字节输入流，不能读取含有中文的键值对
	 * 		Reader reader：字符输入流，能读取含有中文的键值对
	 * 使用步骤：
	 * 		1.创建Properties集合对象
	 * 		2.使用Properties集合对象中 的方法load读取保存键值对的文件
	 * 		3.遍历Properties集合
	 * 		注意：
	 * 			1.存储键值对的文件中，键与值默认的连接符号可以使用=，空格(其他符号)
	 * 			2.存储键值对的文件中，可以使用#进行注释，被注释的键值不会再被读取
	 * 			3.存储键值对的文件中，键与值默认都是字符串，不用再加“”
	 * @throws IOException  
	 */
	private static void show3() throws  IOException {
		//1.创建Properties集合对象
		Properties prop = new Properties();
		
		//2.使用Properties集合对象中 的方法load读取保存键值对的文件
		//字符流，一般使用字符流
		prop.load(new FileReader("src\\DemoIO\\show2.txt"));
		//字节流,不能读取中文，会有乱码
//		prop.load(new FileInputStream("src\\DemoIO\\show2.txt"));
		
		//3.遍历Properties集合
		Set<String> set = prop.stringPropertyNames();
		for (String key : set) {
			String value = prop.getProperty(key);
			System.out.println(key + "=" + value);
		}
		
	}
	/**
	 *可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入硬盘中存储
	 *		void store(OutputStream out,String comments)
	 *		void store(Writer writer ,String comments)
	 *		参数：
	 *			OutputStream out:字节输出流，不能写入中文
	 *			Writer writer:字符输出流，可以写入中文
	 *			String comments:注释，用来说明保存的文件是做什么用的
	 *					不能使用中文，会产生乱码，默认编码是Unicode
	 *					一般使用空字符串
	 *
	 *		使用步骤：
	 *			1.创建Properties集合对象，添加数据
	 *			2.创建字节流输出/字符流输出对象，构造方法中绑定要输出的目的地
	 *			3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入硬盘中存储
	 *			4.释放资源
	 * @throws IOException 
	 */
	private static void show2() throws IOException {
		// 1.创建Properties集合对象，添加数据
		Properties prop = new Properties();
		prop.setProperty("迪丽热巴", "168");
		prop.setProperty("古力娜扎", "165");
		prop.setProperty("马儿扎哈", "170");
		/*字符流*/
//		//2.创建字节流输出/字符流输出对象，构造方法中绑定要输出的目的地
//		FileWriter fw = new FileWriter("src\\DemoIO\\show2.txt");
//		//3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入硬盘中存储
//		prop.store(fw,"save data");
//		//4.释放资源
//		fw.close();
		
		//字节流
		prop.store(new FileOutputStream("src\\DemoIO\\show2Byte.txt"), "字节流save Data");
		//字节流写入中文会产生乱码
		
	}
	/**
	 *使用Properties集合存储数据，遍历取出Properties中的数据
	 *Properties集合是一个双列集合，key和value都是默认字符串
	 *Properties集合有一些操作字符串的特有方法
	 *		Object setProperty(String key,String value) 调用Hashtable的方法put
	 *		String getProperty(String key) 通过key找到value值，此方法相当于Map集合的get(key)方法
	 *		Set<String> stringPropertyNames() 返回此属性列表中的键值，其后该键及其对应值是字符串，
	 *											此方法相当于Map集合的keySet方法
	 *
	 */
	private static void show1() {
		// 创建Properties集合对象
		Properties prop = new Properties();
		//使用setProperty往集合中添加元素
		prop.setProperty("迪丽热巴", "168");
		prop.setProperty("古力娜扎", "165");
		prop.setProperty("马儿扎哈", "170");
		//prop.put(1, true);
		
		//使用StringPropertyNames把Properties集合中的键取出，存储到set集合中
		Set<String> set = prop.stringPropertyNames();
		
		//遍历set集合，取出Properties集合中的每一个键
		for (String key : set) {
			String value = prop.getProperty(key);
			System.out.println(key + "=" + value);
		}
	}
}
