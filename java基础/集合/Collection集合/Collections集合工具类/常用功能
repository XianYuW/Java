java.util.Collections是集合工具类，用来对集合进行操作。部分方法如下：
        1.public static <T> boolean addAll(Collection<T> c,T... elements):往集合中添加一些元素
        2.public static void shuffle(List<?> list):打乱集合顺序
        3.public static <T> void sort(List<T> list):将集合中元素按照默认规则排序(一般是升序排序)
        4.public static <T> void sort(List<T> list,Comparator<? super T>):将集合中元素按照指定规则排序
            注：3.sort(List<T> list)使用前提
                被排序的集合里边存储的元素，必须实现Comparable，重写接口中的方法comparableTo定义排序的规则
                
               			 Comparable接口的排序规则：
                    			自己(this) - 参数：升序
                    			参数 - 自己(this)：降序
		    
		3.sort()和4.sort(,)方法的区别：
			Comparable:自己(this)和别人(参数)比较，自己需要实现Comparable接口，还要重写比较的comparableTo方法
                    	Comparator:相当于找一个三方库，进行比较
				Comparator排序规则：
					o1 - o2;//升序
//代码练习
public class DemoCollections01 {
	public static void main(String[] args) {
		ArrayList<String> list = new ArrayList<String>();
		//往集合中添加多个元素
		Collections.addAll(list,"a","b","c","d","e");//[a, b, c, d, e]
		
		//打乱集合顺序，随机打乱
		Collections.shuffle(list);//[b, a, d, e, c]
		System.out.println(list);
	}
}
//Person类
public class Person implements Comparable<Person>{
	private String name;
	private int age;
	public Person() {
		super();
	}
	public Person(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + age;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}
	@Override
	public String toString() {
		return "Person {name=" + name + ", age=" + age + "}";
	}
	//重写排序的规则
	@Override
	public int compareTo(Person o) {
		return this.getAge() - o.getAge();//年龄升序排序
	}
}
//3.sort()方法
public class DemoSortComparable {
	public static void main(String[] args) {
		
		ArrayList<Integer> list1 = new ArrayList<>();
		Collections.addAll(list1,1,3,2);
		System.out.println(list1);//[1,3,2]
		Collections.sort(list1);
		System.out.println(list1);//[1, 2, 3]
		
		ArrayList<String> list2 = new ArrayList<>();
		Collections.addAll(list2,"a","c","b");
		System.out.println(list2);//[a, c, b]
		Collections.sort(list2);
		System.out.println(list2);//[a, b, c]
		
		ArrayList<Person> list3 = new ArrayList<>();
		list3.add(new Person("迪丽热巴",18));
		list3.add(new Person("古力娜扎",19));
		list3.add(new Person("马尔扎哈",15));
		System.out.println(list3);//[Person {name=迪丽热巴, age=18}, Person {name=古力娜扎, age=19}, Person {name=马尔扎哈, age=15}]
		Collections.sort(list3);
		System.out.println(list3);//[Person {name=马尔扎哈, age=15}, Person {name=迪丽热巴, age=18}, Person {name=古力娜扎, age=19}]
		
		ArrayList<Person> list4 = new ArrayList<>();
		Collections.addAll(list4, new Person("张三",22),new Person("李四",20),new Person("王五",25));
		System.out.println(list4);//[Person {name=张三, age=22}, Person {name=李四, age=20}, Person {name=王五, age=25}]
		Collections.sort(list4);
		System.out.println(list4);//[Person {name=李四, age=20}, Person {name=张三, age=22}, Person {name=王五, age=25}]
	}
}
//Student类
public class Student {
	private String name;
	private int age;
	public Student() {
		super();
	}
	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + age;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}
	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + "]";
	}
}	
//4.sort(，)方法
public class DemoSortComparator {
	public static void main(String[] args) {
		ArrayList<Integer> list = new ArrayList<>();
		Collections.addAll(list, 1,3,2,4);
		
		Collections.sort(list, new Comparator<Integer>() {//匿名对象+匿名内部类
			@Override
			public int compare(Integer o1, Integer o2) {
				// 重写排序方法
				return o1 - o2;//升序
			}
		});
		System.out.println(list);
		
		ArrayList<Student> list2 = new ArrayList<>();
		Collections.addAll(list2, new Student("迪丽热巴",18),new Student("古力娜扎",20),new Student("马儿扎哈",15));
		System.out.println(list2);//[Student [name=迪丽热巴, age=18], Student [name=古力娜扎, age=20], Student [name=马儿扎哈, age=15]]
		
//		//方法一：
//		Comparator<Student> c = new Comparator<Student>() {
//			@Override
//			public int compare(Student o1, Student o2) {
//				return o1.getAge() - o2.getAge();
//			}	
//		};
		
		//方法二：
		Collections.sort(list2, new Comparator<Student>() {
			@Override
			public int compare(Student o1, Student o2) {
				//重写排序方法
				return o1.getAge() - o2.getAge();//升序
			}
		});
		System.out.println(list2);//[Student [name=马儿扎哈, age=15], Student [name=迪丽热巴, age=18], Student [name=古力娜扎, age=20]]
	}
}	
